providers {
  google {
    provider = "google"
    project = "cloudscript-445505"
    region = "us-central1"
    zone = "us-central1-c"
    version = "~> 4.0"
  }
}

service "webapp" {
  provider = "google"
  infrastructure {
    compute "gke_cluster" {
      name = "primary-cluster-2"
      resource_type = "google_container_cluster"
      initial_node_count = 1
      location = "us-central1-c"
    }

    compute "gke_node_pool" {
      name = "default-pool"
      cluster = "${infrastructure.compute.gke_cluster.name}"
      node_count = 2
      resource_type = "google_container_node_pool"
    }

    compute "mysql_server" {
      name = "mysql-server-instance"
      machine_type = "n1-standard-1"
      resource_type = "google_compute_instance"
      tags = ["db-server"]
      boot_disk = [
        {
          "initialize_params": {
            "image": "debian-cloud/debian-11"
          }
        }
      ]
      network_interface = [
        {
          "network": "default",
          "access_config": {}
        }
      ]
    }
  }

configuration {
    play "webapp_debian" {
      name = "Configure webapp on Debian"
      hosts = "{{ target_servers | default('all') }}"
      become = true
      vars = {
        target_web_servers = "web_servers"
        target_db_servers = "db_servers"
      }

      # Packages tasks block
      task {
        name = "Packages tasks"
        block {
          task {
            name = "Install required packages"
            package {
              name = "{{ item }}"
              state = "present"
              update_cache = true
            }
            loop = ["nginx", "docker"]
            check_mode = false  # Ensures packages are installed even in check mode
          }
        }
      }

      # Other tasks block
      task {
        name = "Other tasks"
        block {
          task {
            name = "Create/modify /etc/nginx/nginx.conf"
            copy {
              dest = "/etc/nginx/nginx.conf"
              content = file("nginx.conf")
              mode = "0644"
              owner = "root"
              group = "root"
            }
            notify = ["restart nginx"]
            when = "ansible_distribution == 'Debian'"
          }

          task {
            name = "Ensure nginx is started"
            service {
              name = "nginx"
              state = "started"
              enabled = true
            }
            register = "nginx_started_result"
            retries = 3
            delay = 5
            when = "ansible_distribution == 'Debian'"
          }

          task {
            name = "Verify nginx is serving content"
            uri {
              url = "http://localhost"
              status_code = 200
            }
            register = "nginx_response"
            retries = 3
            delay = 5
            until = "nginx_response.status == 200"
          }
        }
      }

      # Handlers
      handler {
        name = "restart nginx"
        service {
          name = "nginx"
          state = "restarted"
        }
      }
    }
  }

  containers {
    job "system-backup" {
      type            = "CronJob"
      image           = "backup-tool:1.0"
      schedule        = "0 3 * * *"  # Every day at 3:00 AM
      command         = ["/usr/bin/backup.sh"]
      args            = ["--full", "--destination", "/backups"]
      user            = "backupuser"
      restartPolicy   = "OnFailure"
      
      environment = {
        BACKUP_DIR = "/backups"
        LOG_FILE   = "/var/log/backup.log"
        DB_PASSWORD = "secretpass"
      }
    }

    app "admin-tool" {
      image = "nginx:alpine"
      type  = "Deployment"
      replicas = 1

      auto_scaling {
        min_replicas                   = 1
        max_replicas                   = 5
        target_cpu_utilization_percentage = 70
      }

      service {
        type = "ClusterIP"
        ports = [
          {
            container_port = 80
            service_port   = 80
          }
        ]
      }
    }
  }

  deployment {
    "infrastructure.compute.mysql_server" maps_to "configuration.play.webapp_debian"
  }
}